# vim: filetype=conf
backend = "glx"
paint-on-overlay = true;
vsync = "opengl-swc";

# These are important. The first one enables the opengl backend. The last one is the vsync method. Depending on the driver you might need to use a different method.
# The other options are smaller performance tweaks that work well in most cases.
# You can find the rest of the options here: https://github.com/chjj/compton/wiki/perf-guide, and here: https://github.com/chjj/compton/wiki/vsync-guide


#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;


# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
glx-swap-method = "-1";

# Limit compton to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
sw-opti = true;


# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;
# Painting on X Composite overlay window. Recommended.
paint-on-overlay = true;


#################################
#
# Shadows
#
#################################

## Enabled client-side shadows on windows.
#shadow = false;
## Don't draw shadows on DND windows.
#no-dnd-shadow = true;
## Avoid drawing shadows on dock/panel windows.
#no-dock-shadow = true;
## Zero the part of the shadow's mask behind the window. Fix some weirdness with ARGB windows.
#clear-shadow = true;
## The blur radius for shadows. (default 12)
#shadow-radius = 5;
## The left offset for shadows. (default -15)
#shadow-offset-x = -5;
## The top offset for shadows. (default -15)
#shadow-offset-y = -5;
## The translucency for shadows. (default .75)
#shadow-opacity = 0.5;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
#shadow-exclude = [
#    "! name~=''",
#    "name = 'Notification'",
#    "name = 'Plank'",
#    "name = 'Docky'",
#    "name = 'Kupfer'",
#    "name = 'xfce4-notifyd'",
#    "name *= 'VLC'",
#    "name *= 'compton'",
#    "name *= 'Chromium'",
#    "name *= 'Chrome'",
#    "name *= 'Firefox'",
#    "class_g = 'launcher.exe'",
#    "class_g = 'Conky'",
#    "class_g = 'Kupfer'",
#    "class_g = 'Synapse'",
#    "class_g ?= 'Notify-osd'",
#    "class_g ?= 'Cairo-dock'",
#    "class_g ?= 'Xfce4-notifyd'",
#    "class_g ?= 'Xfce4-power-manager'"
#];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

#################################
#
# Opacity
#
#################################

#menu-opacity = 1;
#inactive-opacity = 1;
#active-opacity = 1;
#frame-opacity = 1;
#inactive-opacity-override = false;
#alpha-step = 0.06;

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# blur-background = true;
# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = false;
#blur-background-exclude = [
#    "window_type = 'dock'",
#    "window_type = 'desktop'"
#];

#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
fading = false;
# The time between steps in a fade in milliseconds. (default 10).
#fade-delta = 4;
# Opacity change between steps while fading in. (default 0.028).
#fade-in-step = 0.03;
# Opacity change between steps while fading out. (default 0.03).
#fade-out-step = 0.03;
# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = false;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = false;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = false;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = false;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = false;

# Specify refresh rate of the screen.
# If not specified or 0, compton will try detecting this with X RandR extension.
# Set the Refresh Rate to that of your monitor.
refresh-rate = 0;



#  #Shadow
# shadow = true;			# Enabled client-side shadows on windows.
# #no-dock-shadow = true;		# Avoid drawing shadows on dock/panel windows.
# #no-dnd-shadow = true;		# Don't draw shadows on DND windows.
# #clear-shadow = true;		# Zero the part of the shadow's mask behind the window (experimental).
# shadow-radius = 7;		# The blur radius for shadows. (default 12)
# shadow-offset-x = -7;		# The left offset for shadows. (default -15)
# shadow-offset-y = -7;		# The top offset for shadows. (default -15)
# shadow-exclude = [
#  "! name~=''",
#  "n:e:Notification",
#  "n:e:Plank",
#  "n:e:Docky",
#  "g:e:Synapse",
#  "g:e:Kupfer",
#  "g:e:WC_Cronograph",
#  "g:e:Conky",
#  "n:w:*Firefox*",
#  "n:w:*Chrome*",
#  "n:w:*Chromium*",
#  "class_g ?= 'Notify-osd'",
#  "class_g ?= 'Cairo-dock'",
#  "class_g ?= 'Xfce4-notifyd'",
#  "class_g ?= 'Xfce4-power-manager'"
# ];
# 
# # The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
# # (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# # This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
# 
# # Fading
# fading = true; # Fade windows during opacity changes.
# fade-delta = 1; # The time between steps in a fade in milliseconds. (default 10).
# fade-in-step = 0.03; # Opacity change between steps while fading in. (default 0.028).
# fade-out-step = 0.03; # Opacity change between steps while fading out. (default 0.03).
# #no-fading-openclose = true; # Fade windows in/out when opening/closing
# 
# detect-client-opacity = true; # This prevents opacity being ignored for some apps. For example without this enabled my xfce4-notifyd is 100% opacity no matter what.

 ## Window type settings
 #wintypes:
 #{
 #  tooltip = { fade = false; shadow = false; };
 #};
 #


# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = false;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
};
